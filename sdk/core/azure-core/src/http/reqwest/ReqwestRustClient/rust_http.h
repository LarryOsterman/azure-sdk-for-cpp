/* Copyright (c) Microsoft Corp. All Rights Reserved.
 * Licensed under the MIT License.
 **/

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <cstdarg>
#include <cstdint>
#include <cstdlib>
#include <ostream>
#include <new>

namespace Azure {
namespace Core {
namespace Http {
namespace RustTransport {
namespace _detail {
namespace RustInterop {

/// Marker type for an Azure::Core::IO::BodyStream type. Treated as an opaque type by Rust.
struct CppStream;

struct ReqwestWrapper;

struct RuntimeContext;

struct RustBodyStream;

struct RustByteArray;

struct RustError;

struct RustHeaderIterator;

struct RustHttpHeader;

/// An HttpResult is a dummy type whose purpose is to wrap a Result<RawResponse> type
/// when presented to C++ code.
struct RustHttpResult;

struct RustRawResponse;

struct RustRequest;

struct HttpVersion {
  int16_t major;
  int16_t minor;

  friend std::ostream& operator<<(std::ostream& stream, const HttpVersion& instance) {
    return stream << "{ " << "major=" << instance.major << ", "
                          << "minor=" << instance.minor << " }";
  }
};

extern "C" {

ReqwestWrapper *reqwest_wrapper_new();

void reqwest_wrapper_delete(ReqwestWrapper *http_client);

RustHttpResult *reqwest_wrapper_send(const RuntimeContext *runtime,
                                     const ReqwestWrapper *http_client,
                                     RustRequest *request);

void initialize();

const uint8_t *byte_array_as_ptr(const RustByteArray *byte_array);

uintptr_t byte_array_len(const RustByteArray *byte_array);

void byte_array_delete(RustByteArray *byte_array);

/// Get the next chunk of bytes from the stream.
/// Wraps the Azure::Core::IO::BodyStream::Read method.
extern uintptr_t stream_get_body_bytes(CppStream *stream, uint8_t *buffer, uintptr_t max_size);

RustHttpHeader *header_iterator_next(RustHeaderIterator *iterator);

void header_iterator_delete(RustHeaderIterator *iterator);

void rust_string_delete(int8_t *rust_string);

int8_t *http_header_get_name(const RustHttpHeader *header);

int8_t *http_header_get_value(const RustHttpHeader *header);

void http_header_delete(RustHttpHeader *header);

void request_set_header(RustRequest *request, const char *name, const char *value);

void request_set_body(RustRequest *request, CppStream *body);

void request_delete_header(RustRequest *request, const char *name);

RustHeaderIterator *request_get_headers(const RustRequest *request);

const char *request_get_method(const RustRequest *request);

bool request_set_url(RustRequest *request, const char *url);

const char *request_get_url(RustRequest *request);

void request_set_method(RustRequest *request, const char *method);

RustRequest *request_new();

void request_delete(RustRequest *request);

RustRawResponse *request_send(const RuntimeContext *runtime_context, RustRequest *request);

bool result_has_error(const RustHttpResult *result);

RustError *result_extract_error(RustHttpResult *result);

RustRawResponse *result_extract_response(RustHttpResult *result);

void result_delete(RustHttpResult *result);

RustHeaderIterator *raw_response_get_header_iterator(const RustRawResponse *response);

uint16_t raw_response_get_status(const RustRawResponse *response);

HttpVersion raw_response_get_version(const RustRawResponse *response);

uint64_t raw_response_get_content_length(const RustRawResponse *response);

RustBodyStream *raw_response_extract_body_stream(RustRawResponse *response);

RustByteArray *raw_response_get_body_bytes(RuntimeContext *runtime_context,
                                           RustRawResponse *response);

void raw_response_delete(RustRawResponse *raw_response);

RuntimeContext *runtime_context_new();

RustError *runtime_context_get_error(const RuntimeContext *ctx);

void runtime_context_delete(RuntimeContext *ctx);

RustByteArray *rust_body_stream_read_bytes(RustBodyStream *stream, RuntimeContext *runtime_context);

void rust_body_stream_delete(RustBodyStream *stream);

int8_t *rust_error_get_message(const RustError *error);

void rust_error_delete(RustError *error);

} // extern "C"

} // namespace RustInterop
} // namespace _detail
} // namespace RustTransport
} // namespace Http
} // namespace Core
} // namespace Azure
